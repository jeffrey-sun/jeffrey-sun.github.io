<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编码 on Jeffrey&#39;s blog</title>
    <link>https://blog.jeffreysun.net/categories/%E7%BC%96%E7%A0%81/</link>
    <description>Recent content in 编码 on Jeffrey&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Jun 2019 23:07:49 +0800</lastBuildDate>
    
	<atom:link href="https://blog.jeffreysun.net/categories/%E7%BC%96%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go配置读取</title>
      <link>https://blog.jeffreysun.net/post/2019/06/14/go%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96/</link>
      <pubDate>Fri, 14 Jun 2019 23:07:49 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2019/06/14/go%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;写程序总是需要一定的配置或者参数的。参数的来源可以是：命令行输入、配置文件和环境变量。本文就已经了解到Go语言的几种配置或者参数方式加一说明。
初步估计分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原生工具获取&lt;/li&gt;
&lt;li&gt;三方工具获取&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python字符串格式化</title>
      <link>https://blog.jeffreysun.net/post/2019/05/29/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/</link>
      <pubDate>Wed, 29 May 2019 15:43:59 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2019/05/29/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Pyton用了一段时间了，对字符串的格式化最多用的就是&lt;code&gt;&amp;quot;%s&amp;quot; % var&lt;/code&gt;，最多，多加几个参数，或者加个&lt;code&gt;str()&lt;/code&gt;处理一下。一直美誉深究，能用就好。
前段时间刚好做了一个测试，想把字符串安装特定的格式输出，这样看过程更加方便点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Maven Settings文件配置</title>
      <link>https://blog.jeffreysun.net/post/2019/05/29/maven-settings%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 29 May 2019 15:42:52 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2019/05/29/maven-settings%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在折腾maven环境配置，在网上搜了一些资料，随便做一下记录&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初始化Python3环境</title>
      <link>https://blog.jeffreysun.net/post/2019/05/26/%E5%88%9D%E5%A7%8B%E5%8C%96python3%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 26 May 2019 10:22:41 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2019/05/26/%E5%88%9D%E5%A7%8B%E5%8C%96python3%E7%8E%AF%E5%A2%83/</guid>
      <description>背景 最近之前的网络主机到期了，换了一个服务商。想写点python的工具，内置的python版本是2.7。 因此在这里记录过程 环境说明 操作系统：</description>
    </item>
    
    <item>
      <title>基础镜像配置</title>
      <link>https://blog.jeffreysun.net/post/2019/05/22/%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 22 May 2019 10:34:12 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2019/05/22/%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</guid>
      <description>apline 修改alpine镜像源 使用阿里云的源 https://mirrors.aliyun.com 1 sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories apk 的基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 $ apk add # 安装软件 $ apk add asterisk=1.6.0.21-r0 #安装指定</description>
    </item>
    
    <item>
      <title>python popen问题</title>
      <link>https://blog.jeffreysun.net/post/2018/06/26/python-popen%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 26 Jun 2018 15:27:40 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2018/06/26/python-popen%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;一次艰辛的python代码调试。 poen函数，先后遇到 &lt;code&gt;子进程kill不掉&lt;/code&gt;、 &lt;code&gt;执行任务text file busy&lt;/code&gt;（让我一个英语盲， 竟然能这么熟练的敲出这三个单词，一定是经历了什么不为人知的···）。 简单说明一下程序的作用， 从网络接收脚本， 然后执行脚本， 最后收集脚本执行的结果。嗯，就是这样简单。 网络服务采用的是多线程模式，子进程采用 popen方式打开，输出使用管道。 时间紧， 直接跳转到最后看总结即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker 容器无法删除</title>
      <link>https://blog.jeffreysun.net/post/2018/04/19/docker-%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4/</link>
      <pubDate>Thu, 19 Apr 2018 21:38:35 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2018/04/19/docker-%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;使用docker 过程中经常直接重启了docker服务，导致正在运行的容器异常退出，删除的时候会报错。在这里总结一下遇到的无法删除容器的教训。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker容器时区修改</title>
      <link>https://blog.jeffreysun.net/post/2018/04/18/docker%E5%AE%B9%E5%99%A8%E6%97%B6%E5%8C%BA%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Wed, 18 Apr 2018 11:01:23 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2018/04/18/docker%E5%AE%B9%E5%99%A8%E6%97%B6%E5%8C%BA%E4%BF%AE%E6%94%B9/</guid>
      <description>&lt;h1 id=&#34;docker容器修改时区&#34;&gt;docker容器修改时区&lt;/h1&gt;
&lt;p&gt;在容器中，执行&lt;code&gt;date&lt;/code&gt;显示的时间可能出现八小时的时间差，这是因为docker默认使用时区为0。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/usr/share/zoneinfo&lt;/code&gt;目录下有大量的时区文件，根据自己的需要把自己需要的时区信息拷贝到&lt;code&gt;/etc/&lt;/code&gt;目录下，重命名为 &lt;code&gt;localtime&lt;/code&gt;就可以。这里我一般使用 &lt;code&gt;cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker开启远程访问</title>
      <link>https://blog.jeffreysun.net/post/2018/03/27/docker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Tue, 27 Mar 2018 14:21:18 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2018/03/27/docker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</guid>
      <description>&lt;h1 id=&#34;引言&#34;&gt;引言&lt;/h1&gt;
&lt;p&gt;Docker采用&lt;code&gt;C/S&lt;/code&gt;架构，包括客户端和服务端。Docker守护进程（Daemon）作为服务端接受来自客户端的请求，并处理这些请求（ 创建、 运行、 分发容器）。Docker从 0.5.2 之后使用本地Unix套接字机制强制代替了原先绑定在127.0.0.1 上的套接字，以加强服务端的防护。用户任然可以使用HTTP提供REST API 访问。建议使用安全机制，确保只有可行的网络或VPN，或证书保护机制（例如受保护的stunnel和ssl认证）下的访问可以进行。
这里简单说明开启 REST API的过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker容器网络设置</title>
      <link>https://blog.jeffreysun.net/post/2018/03/26/docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 26 Mar 2018 14:04:58 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2018/03/26/docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;h1 id=&#34;引言&#34;&gt;引言&lt;/h1&gt;
&lt;p&gt;docker 是一个非常方便的工具，在在使用过程中，需要使用一些网络相关的信息。找了一些资料，在这里做点笔记。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker部署Jenkins集成环境</title>
      <link>https://blog.jeffreysun.net/post/2018/03/22/docker%E9%83%A8%E7%BD%B2jenkins%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 22 Mar 2018 22:45:29 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2018/03/22/docker%E9%83%A8%E7%BD%B2jenkins%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</guid>
      <description>docker run -dit &amp;ndash;rm -p 8080:8080 -p 50000:50000 &amp;ndash;name jenkins &amp;ndash;net jenkins &amp;ndash;ip 172.18.1.2 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker &amp;ndash;mount source=jenkins-home,target=/var/jenkins_home -v $(which git):/usr/bin/git jenkins/jenkins:lts</description>
    </item>
    
    <item>
      <title>docker设置</title>
      <link>https://blog.jeffreysun.net/post/2018/03/13/docker%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Tue, 13 Mar 2018 20:57:17 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2018/03/13/docker%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;docker代理设置&lt;/li&gt;
&lt;li&gt;docker镜像加速&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>解决 UnsupportedOperationException 异常</title>
      <link>https://blog.jeffreysun.net/post/2017/12/04/%E8%A7%A3%E5%86%B3-unsupportedoperationexception-%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Mon, 04 Dec 2017 17:08:13 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2017/12/04/%E8%A7%A3%E5%86%B3-unsupportedoperationexception-%E5%BC%82%E5%B8%B8/</guid>
      <description>&lt;h1 id=&#34;异常现象&#34;&gt;异常现象&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;java.lang.UnsupportedOperationException: null
    at java.util.AbstractList.add(AbstractList.java:148) ~[?:1.8.0_45]
    at java.util.AbstractList.add(AbstractList.java:108) ~[?:1.8.0_45]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>openssl自签名证书</title>
      <link>https://blog.jeffreysun.net/post/2017/11/27/openssl%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Mon, 27 Nov 2017 11:43:48 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2017/11/27/openssl%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;在工作中，遇到一个要写agent的场景，因为agent具有一定的执行能，且由控制端发起，因此就需要考虑安全问题。因为代码需要部署到客户机器上，简单使用对称加密不安全，主要是担心密钥不安全。因此选用了 SSL/TLS 协议。 使用的python有库可以选用，因此，最大的工作量还是 证书的生成。&lt;/p&gt;
&lt;p&gt;找到 一个比较全的资料&lt;a href=&#34;http://blog.csdn.net/howeverpf/article/details/21622545&#34;&gt;如何使用OpenSSL工具生成根证书与应用证书&lt;/a&gt;，在此留档，以供参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spark学习参考文档</title>
      <link>https://blog.jeffreysun.net/post/2017/11/21/spark%E5%AD%A6%E4%B9%A0%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</link>
      <pubDate>Tue, 21 Nov 2017 19:50:52 +0000</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2017/11/21/spark%E5%AD%A6%E4%B9%A0%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</guid>
      <description>环境安装 scala 环境安装 - 菜鸟教程 scala 官方下载地址 - 包含详细安装过程 学习资料 scala基础教程 - 菜鸟教程 Spark 编程指南简体中文版</description>
    </item>
    
    <item>
      <title>Java的try catch finally 执行顺序</title>
      <link>https://blog.jeffreysun.net/post/2017/11/16/java%E7%9A%84try-catch-finally-%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Thu, 16 Nov 2017 17:56:38 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2017/11/16/java%E7%9A%84try-catch-finally-%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;在java编程过程中，经常会使用 try catch语句来处理异常，对打开了资源的文件的，要使用finally进行关闭。
正常的执行顺序是 try块，如果没有异常执行finally块，有异常跳转到catch块，最后执行finally块。 刚好遇到一个try catch 带有finally的语句，还使用了return。于是，就想到了语句执行情况的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jstorm中spout组件吞吐量降低</title>
      <link>https://blog.jeffreysun.net/post/2017/11/09/jstorm%E4%B8%ADspout%E7%BB%84%E4%BB%B6%E5%90%9E%E5%90%90%E9%87%8F%E9%99%8D%E4%BD%8E/</link>
      <pubDate>Thu, 09 Nov 2017 11:04:36 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2017/11/09/jstorm%E4%B8%ADspout%E7%BB%84%E4%BB%B6%E5%90%9E%E5%90%90%E9%87%8F%E9%99%8D%E4%BD%8E/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;正在负责运维的jstorm集群因为CPU消耗过高，又没有机器投入， 只能想办法优化Jstorm的逻辑。 大家都说序列化\反序列化比较消耗资源， 就想着批量性的序列化。 不懂背景的胡乱修改前人的代码就是一个深不见底的坑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决Unsupported major.minor version 51.0问题</title>
      <link>https://blog.jeffreysun.net/post/2017/10/12/%E8%A7%A3%E5%86%B3unsupported-major.minor-version-51.0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 12 Oct 2017 14:17:00 +0800</pubDate>
      
      <guid>https://blog.jeffreysun.net/post/2017/10/12/%E8%A7%A3%E5%86%B3unsupported-major.minor-version-51.0%E9%97%AE%E9%A2%98/</guid>
      <description>异常说明 Unsupported major.minor version 51.0 这个异常是由于在jdk1.6环境运行了1.7的代码导致的。在修改maven的目标环境调整到1.6后就不会出现。 参考连接</description>
    </item>
    
  </channel>
</rss>